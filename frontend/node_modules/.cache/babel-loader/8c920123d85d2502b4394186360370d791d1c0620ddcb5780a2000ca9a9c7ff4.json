{"ast":null,"code":"var _jsxFileName = \"/home/basava/Documents/TASKflow/frontend/src/pages/Payment/payment.js\",\n  _s = $RefreshSig$();\n/* import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n  const hourlyRate = sessionStorage.getItem('hourlyRate');  // Fetch hourly rate from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [hours, setHours] = useState(1);\n  const [amount, setAmount] = useState(hourlyRate * hours);  // Calculated based on hours and hourly rate\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const totalAmount = hourlyRate * hours * 100;  // Total amount in paise\n    const partialAmount = totalAmount / 2;\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF',\n      amount: partialAmount,  // Set to partial amount\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        try {\n          await axios.post('/api/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            taskerId,\n            totalAmount,\n            partialAmount,\n            hours,\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"payment-container\">\n      <div className=\"billing-info\">\n        <h2>Billing Information</h2>\n        <form onSubmit={handlePayment}>\n          \n          <button type=\"submit\">Pay Now</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Payment;\n */\n/* \nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n\n  // Retrieve user data from session storage\n  const hourlyRate = parseFloat(sessionStorage.getItem('hourlyRate')) || 0;\n  const userId = sessionStorage.getItem('userId');\n  const serviceId = sessionStorage.getItem('serviceId');\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [hours, setHours] = useState(1);\n  const [amount, setAmount] = useState(hourlyRate * hours * 100); // In paise\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const totalAmount = hourlyRate * hours * 100;  // Total amount in paise\n    const partialAmount = totalAmount / 2;\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF', // Replace with live key in production\n      amount: partialAmount,\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async (response) => {\n        try {\n          await axios.post('/api/booking/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            userId,\n            taskerId,\n            serviceId,\n            totalAmount,\n            partialAmount,\n            hours,\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"payment-container bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-600 min-h-screen flex justify-center items-center py-10\">\n      <div className=\"billing-info bg-white p-8 rounded-lg shadow-2xl w-full max-w-4xl grid grid-cols-1 md:grid-cols-2 gap-8 relative z-10\">\n        \n       \n        <div className=\"form-container space-y-6\">\n          <h2 className=\"text-2xl font-semibold text-gray-800 mb-6\">Billing Information</h2>\n          \n          <form onSubmit={handlePayment} className=\"space-y-6\">\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"Name\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Email\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"tel\"\n              value={contact}\n              onChange={(e) => setContact(e.target.value)}\n              placeholder=\"Contact\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"number\"\n              value={hours}\n              onChange={(e) => setHours(e.target.value)}\n              min=\"1\"\n              required\n              placeholder=\"Hours\"\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n          </form>\n        </div>\n\n        \n        <div className=\"checkout-summary bg-gray-100 p-6 rounded-lg shadow-md space-y-6\">\n          <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">Order Summary</h3>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Hourly Rate:</span>\n              <span className=\"font-medium text-gray-900\">₹{hourlyRate.toFixed(2)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Hours:</span>\n              <span className=\"font-medium text-gray-900\">{hours}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Total Amount:</span>\n              <span className=\"font-medium text-gray-900\">₹{(hourlyRate * hours).toFixed(2)}</span>\n            </div>\n          </div>\n          \n          <button\n            type=\"submit\"\n            onClick={handlePayment}\n            className=\"w-full py-3 px-6 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition duration-300\"\n          >\n            Pay Now\n          </button>\n        </div>\n      </div>\n\n      \n      <div className=\"absolute inset-0 bg-black opacity-30 z-0\"></div>\n    </div>\n  );\n};\n\nexport default Payment;\n */\n/* \n//correct \nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n  const hourlyRate = parseFloat(sessionStorage.getItem('hourlyRate'));  // Fetch hourly rate from session storage\n  const userId = sessionStorage.getItem('userID');  // Fetch user ID from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState('08:00');\n  const [endTime, setEndTime] = useState('16:00');\n  const [totalHours, setTotalHours] = useState(0);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [partialAmount, setPartialAmount] = useState(0);\n  const [scriptLoaded, setScriptLoaded] = useState(false);  // State to track if Razorpay script is loaded\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      script.onload = () => {\n        setScriptLoaded(true);  // Set to true once Razorpay script is loaded\n        console.log(\"Razorpay script loaded\");\n      };\n      script.onerror = () => {\n        console.error(\"Failed to load Razorpay script\");\n      };\n      document.body.appendChild(script);\n    };\n\n    loadRazorpayScript(); // Load Razorpay script when component mounts\n  }, []);\n\n  const calculateTotalHours = () => {\n    const start = new Date(`${startDate}T${startTime}`);\n    const end = new Date(`${endDate}T${endTime}`);\n\n    if (start && end && end > start) {\n      const timeDiff = end - start;\n      const hours = timeDiff / (1000 * 60 * 60);\n      const workHoursPerDay = 10;  // 8 AM to 4 PM\n\n      // Calculate full workdays within the date range\n      const totalDays = Math.floor(hours / 24);\n      const fullWorkdayHours = totalDays * workHoursPerDay;\n\n      // Calculate hours for partial days (start/end times)\n      const remainingHours = hours % 24;\n      const partialDayHours = Math.min(remainingHours, workHoursPerDay);\n\n      const totalWorkHours = fullWorkdayHours + partialDayHours;\n      setTotalHours(Math.ceil(totalWorkHours));  // Round up any partial hours to the next full hour\n\n      const amount = Math.ceil(totalWorkHours) * hourlyRate;\n      setTotalAmount(amount);\n      setPartialAmount(amount / 2);\n    } else {\n      setTotalHours(0);\n      setTotalAmount(0);\n      setPartialAmount(0);\n    }\n  };\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n\n    // Check if Razorpay script is loaded before initiating payment\n    if (!scriptLoaded) {\n      alert('Razorpay SDK is still loading. Please wait...');\n      return;\n    }\n\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF', // Replace with your Razorpay key\n      amount: partialAmount * 100,  // Convert to paise\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        // Log the full response from Razorpay to verify it's correct\n        console.log('Razorpay response:', response);\n      \n        // You should have all the required information in the response object\n        const { razorpay_payment_id} = response;\n      \n        // If the required fields are available, proceed with the backend request\n        if (razorpay_payment_id) {\n          await axios.post('/api/payment-verification', {\n            razorpay_payment_id,\n            taskerId,\n            userId,\n            totalAmount,\n            partialAmount,\n            startDate,\n            endDate,\n            startTime,\n            endTime,\n            totalHours,\n          });\n        } else {\n          console.error('Missing Razorpay response details');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId, userId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"bg-gradient-to-r from-gray-800 via-gray-900 to-black min-h-screen flex items-center justify-center py-12 px-6\">\n      <div className=\"max-w-7xl w-full flex bg-white rounded-xl shadow-lg overflow-hidden\">\n       \n        <div className=\"w-full lg:w-1/2 px-6 py-8 bg-gray-50\">\n          <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">Billing Information</h2>\n          <form onSubmit={handlePayment}>\n            <div className=\"space-y-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <input\n                type=\"email\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <input\n                type=\"tel\"\n                placeholder=\"Contact\"\n                value={contact}\n                onChange={(e) => setContact(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">Start Date:</label>\n              <input\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">End Date:</label>\n              <input\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">Start Time:</label>\n              <input\n                type=\"time\"\n                value={startTime}\n                onChange={(e) => setStartTime(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">End Time:</label>\n              <input\n                type=\"time\"\n                value={endTime}\n                onChange={(e) => setEndTime(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <button\n                type=\"button\"\n                onClick={calculateTotalHours}\n                className=\"w-full py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition\"\n              >\n                Calculate Hours & Amount\n              </button>\n              <p className=\"mt-2 text-gray-800\">Total Hours: {totalHours}</p>\n              <p className=\"mt-2 text-gray-800\">Total Amount: ₹{totalAmount}</p>\n              <p className=\"mt-2 text-gray-800\">Partial Amount (50%): ₹{partialAmount}</p>\n            </div>\n          </form>\n        </div>\n\n        \n        <div className=\"w-full lg:w-1/2 bg-indigo-600 text-white flex items-center justify-center py-8\">\n          <button\n            onClick={handlePayment}\n            className=\"px-8 py-4 bg-indigo-700 rounded-lg text-xl font-semibold hover:bg-indigo-800 transition\"\n          >\n            Pay Now\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Payment;\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Payment = () => {\n  _s();\n  const location = useLocation();\n  const {\n    taskerId\n  } = location.state || {};\n  const hourlyRate = parseFloat(sessionStorage.getItem('hourlyRate')); // Fetch hourly rate from session storage\n  const userId = sessionStorage.getItem('userID'); // Fetch user ID from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState('08:00');\n  const [endTime, setEndTime] = useState('16:00');\n  const [totalHours, setTotalHours] = useState(0);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [partialAmount, setPartialAmount] = useState(0);\n  const [scriptLoaded, setScriptLoaded] = useState(false); // State to track if Razorpay script is loaded\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      script.onload = () => {\n        setScriptLoaded(true); // Set to true once Razorpay script is loaded\n        console.log(\"Razorpay script loaded\");\n      };\n      script.onerror = () => {\n        console.error(\"Failed to load Razorpay script\");\n      };\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript(); // Load Razorpay script when component mounts\n  }, []);\n  const calculateTotalHours = () => {\n    const start = new Date(`${startDate}T${startTime}`);\n    const end = new Date(`${endDate}T${endTime}`);\n    if (start && end && end > start) {\n      const timeDiff = end - start;\n      const hours = timeDiff / (1000 * 60 * 60);\n      const workHoursPerDay = 10; // 8 AM to 4 PM\n\n      // Calculate full workdays within the date range\n      const totalDays = Math.floor(hours / 24);\n      const fullWorkdayHours = totalDays * workHoursPerDay;\n\n      // Calculate hours for partial days (start/end times)\n      const remainingHours = hours % 24;\n      const partialDayHours = Math.min(remainingHours, workHoursPerDay);\n      const totalWorkHours = fullWorkdayHours + partialDayHours;\n      setTotalHours(Math.ceil(totalWorkHours)); // Round up any partial hours to the next full hour\n\n      const amount = Math.ceil(totalWorkHours) * hourlyRate;\n      setTotalAmount(amount);\n      setPartialAmount(amount / 2);\n    } else {\n      setTotalHours(0);\n      setTotalAmount(0);\n      setPartialAmount(0);\n    }\n  };\n  const handlePayment = async e => {\n    e.preventDefault();\n\n    // Check if Razorpay script is loaded before initiating payment\n    if (!scriptLoaded) {\n      alert('Razorpay SDK is still loading. Please wait...');\n      return;\n    }\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF',\n      // Replace with your Razorpay key\n      amount: partialAmount * 100,\n      // Convert to paise\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        // Log the full response from Razorpay to verify it's correct\n        console.log('Razorpay response:', response);\n\n        // You should have all the required information in the response object\n        const {\n          razorpay_payment_id\n        } = response;\n\n        // If the required fields are available, proceed with the backend request\n        if (razorpay_payment_id) {\n          // Send the payment info and other booking details to the backend for storage\n          try {\n            const res = await axios.post('http://localhost:5000/api/payment-verification', {\n              razorpay_payment_id,\n              taskerId,\n              userId,\n              totalAmount,\n              partialAmount,\n              startDate,\n              endDate,\n              startTime,\n              endTime,\n              totalHours\n            });\n            if (res.data.success) {\n              alert('Payment verified and booking details saved!');\n            } else {\n              alert('Error saving booking details');\n            }\n          } catch (error) {\n            console.error('Error verifying payment:', error);\n            alert('Payment verification failed');\n          }\n        } else {\n          console.error('Missing Razorpay response details');\n        }\n      },\n      prefill: {\n        name,\n        email,\n        contact\n      },\n      notes: {\n        taskerId,\n        userId\n      },\n      theme: {\n        color: '#F37254'\n      }\n    };\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gradient-to-r from-gray-800 via-gray-900 to-black min-h-screen flex items-center justify-center py-12 px-6\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-7xl w-full flex bg-white rounded-xl shadow-lg overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full lg:w-1/2 px-6 py-8 bg-gray-50\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-semibold text-gray-800 mb-4\",\n          children: \"Billing Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handlePayment,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"space-y-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Name\",\n              value: name,\n              onChange: e => setName(e.target.value),\n              className: \"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"email\",\n              placeholder: \"Email\",\n              value: email,\n              onChange: e => setEmail(e.target.value),\n              className: \"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"tel\",\n              placeholder: \"Contact\",\n              value: contact,\n              onChange: e => setContact(e.target.value),\n              className: \"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 611,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-gray-700\",\n              children: \"Start Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 618,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: startDate,\n              onChange: e => setStartDate(e.target.value),\n              className: \"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 619,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-gray-700\",\n              children: \"End Date:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 625,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: endDate,\n              onChange: e => setEndDate(e.target.value),\n              className: \"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 626,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-gray-700\",\n              children: \"Start Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 632,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              value: startTime,\n              onChange: e => setStartTime(e.target.value),\n              className: \"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 633,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-gray-700\",\n              children: \"End Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"time\",\n              value: endTime,\n              onChange: e => setEndTime(e.target.value),\n              className: \"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 640,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: calculateTotalHours,\n              className: \"w-full py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition\",\n              children: \"Calculate Hours & Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 646,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mt-2 text-gray-800\",\n              children: [\"Total Hours: \", totalHours]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mt-2 text-gray-800\",\n              children: [\"Total Amount: \\u20B9\", totalAmount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"mt-2 text-gray-800\",\n              children: [\"Partial Amount (50%): \\u20B9\", partialAmount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 596,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 595,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full lg:w-1/2 bg-indigo-600 text-white flex items-center justify-center py-8\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePayment,\n          className: \"px-8 py-4 bg-indigo-700 rounded-lg text-xl font-semibold hover:bg-indigo-800 transition\",\n          children: \"Pay Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 662,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 590,\n    columnNumber: 5\n  }, this);\n};\n_s(Payment, \"NtYZtMUi41SWP5rI6qYjz/1DLUM=\", false, function () {\n  return [useLocation];\n});\n_c = Payment;\nexport default Payment;\nvar _c;\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","jsxDEV","_jsxDEV","Payment","_s","location","taskerId","state","hourlyRate","parseFloat","sessionStorage","getItem","userId","name","setName","email","setEmail","contact","setContact","startDate","setStartDate","endDate","setEndDate","startTime","setStartTime","endTime","setEndTime","totalHours","setTotalHours","totalAmount","setTotalAmount","partialAmount","setPartialAmount","scriptLoaded","setScriptLoaded","loadRazorpayScript","script","document","createElement","src","async","onload","console","log","onerror","error","body","appendChild","calculateTotalHours","start","Date","end","timeDiff","hours","workHoursPerDay","totalDays","Math","floor","fullWorkdayHours","remainingHours","partialDayHours","min","totalWorkHours","ceil","amount","handlePayment","e","preventDefault","alert","window","Razorpay","options","key","currency","description","handler","response","razorpay_payment_id","res","post","data","success","prefill","notes","theme","color","razorpay","open","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","onClick","_c","$RefreshReg$"],"sources":["/home/basava/Documents/TASKflow/frontend/src/pages/Payment/payment.js"],"sourcesContent":["/* import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n  const hourlyRate = sessionStorage.getItem('hourlyRate');  // Fetch hourly rate from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [hours, setHours] = useState(1);\n  const [amount, setAmount] = useState(hourlyRate * hours);  // Calculated based on hours and hourly rate\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const totalAmount = hourlyRate * hours * 100;  // Total amount in paise\n    const partialAmount = totalAmount / 2;\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF',\n      amount: partialAmount,  // Set to partial amount\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        try {\n          await axios.post('/api/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            taskerId,\n            totalAmount,\n            partialAmount,\n            hours,\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"payment-container\">\n      <div className=\"billing-info\">\n        <h2>Billing Information</h2>\n        <form onSubmit={handlePayment}>\n          \n          <button type=\"submit\">Pay Now</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Payment;\n */\n/* \nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n\n  // Retrieve user data from session storage\n  const hourlyRate = parseFloat(sessionStorage.getItem('hourlyRate')) || 0;\n  const userId = sessionStorage.getItem('userId');\n  const serviceId = sessionStorage.getItem('serviceId');\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [hours, setHours] = useState(1);\n  const [amount, setAmount] = useState(hourlyRate * hours * 100); // In paise\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const totalAmount = hourlyRate * hours * 100;  // Total amount in paise\n    const partialAmount = totalAmount / 2;\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF', // Replace with live key in production\n      amount: partialAmount,\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async (response) => {\n        try {\n          await axios.post('/api/booking/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            userId,\n            taskerId,\n            serviceId,\n            totalAmount,\n            partialAmount,\n            hours,\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"payment-container bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-600 min-h-screen flex justify-center items-center py-10\">\n      <div className=\"billing-info bg-white p-8 rounded-lg shadow-2xl w-full max-w-4xl grid grid-cols-1 md:grid-cols-2 gap-8 relative z-10\">\n        \n       \n        <div className=\"form-container space-y-6\">\n          <h2 className=\"text-2xl font-semibold text-gray-800 mb-6\">Billing Information</h2>\n          \n          <form onSubmit={handlePayment} className=\"space-y-6\">\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"Name\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Email\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"tel\"\n              value={contact}\n              onChange={(e) => setContact(e.target.value)}\n              placeholder=\"Contact\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"number\"\n              value={hours}\n              onChange={(e) => setHours(e.target.value)}\n              min=\"1\"\n              required\n              placeholder=\"Hours\"\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n          </form>\n        </div>\n\n        \n        <div className=\"checkout-summary bg-gray-100 p-6 rounded-lg shadow-md space-y-6\">\n          <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">Order Summary</h3>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Hourly Rate:</span>\n              <span className=\"font-medium text-gray-900\">₹{hourlyRate.toFixed(2)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Hours:</span>\n              <span className=\"font-medium text-gray-900\">{hours}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Total Amount:</span>\n              <span className=\"font-medium text-gray-900\">₹{(hourlyRate * hours).toFixed(2)}</span>\n            </div>\n          </div>\n          \n          <button\n            type=\"submit\"\n            onClick={handlePayment}\n            className=\"w-full py-3 px-6 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition duration-300\"\n          >\n            Pay Now\n          </button>\n        </div>\n      </div>\n\n      \n      <div className=\"absolute inset-0 bg-black opacity-30 z-0\"></div>\n    </div>\n  );\n};\n\nexport default Payment;\n */\n/* \n//correct \nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n  const hourlyRate = parseFloat(sessionStorage.getItem('hourlyRate'));  // Fetch hourly rate from session storage\n  const userId = sessionStorage.getItem('userID');  // Fetch user ID from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState('08:00');\n  const [endTime, setEndTime] = useState('16:00');\n  const [totalHours, setTotalHours] = useState(0);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [partialAmount, setPartialAmount] = useState(0);\n  const [scriptLoaded, setScriptLoaded] = useState(false);  // State to track if Razorpay script is loaded\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      script.onload = () => {\n        setScriptLoaded(true);  // Set to true once Razorpay script is loaded\n        console.log(\"Razorpay script loaded\");\n      };\n      script.onerror = () => {\n        console.error(\"Failed to load Razorpay script\");\n      };\n      document.body.appendChild(script);\n    };\n\n    loadRazorpayScript(); // Load Razorpay script when component mounts\n  }, []);\n\n  const calculateTotalHours = () => {\n    const start = new Date(`${startDate}T${startTime}`);\n    const end = new Date(`${endDate}T${endTime}`);\n\n    if (start && end && end > start) {\n      const timeDiff = end - start;\n      const hours = timeDiff / (1000 * 60 * 60);\n      const workHoursPerDay = 10;  // 8 AM to 4 PM\n\n      // Calculate full workdays within the date range\n      const totalDays = Math.floor(hours / 24);\n      const fullWorkdayHours = totalDays * workHoursPerDay;\n\n      // Calculate hours for partial days (start/end times)\n      const remainingHours = hours % 24;\n      const partialDayHours = Math.min(remainingHours, workHoursPerDay);\n\n      const totalWorkHours = fullWorkdayHours + partialDayHours;\n      setTotalHours(Math.ceil(totalWorkHours));  // Round up any partial hours to the next full hour\n\n      const amount = Math.ceil(totalWorkHours) * hourlyRate;\n      setTotalAmount(amount);\n      setPartialAmount(amount / 2);\n    } else {\n      setTotalHours(0);\n      setTotalAmount(0);\n      setPartialAmount(0);\n    }\n  };\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n\n    // Check if Razorpay script is loaded before initiating payment\n    if (!scriptLoaded) {\n      alert('Razorpay SDK is still loading. Please wait...');\n      return;\n    }\n\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF', // Replace with your Razorpay key\n      amount: partialAmount * 100,  // Convert to paise\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        // Log the full response from Razorpay to verify it's correct\n        console.log('Razorpay response:', response);\n      \n        // You should have all the required information in the response object\n        const { razorpay_payment_id} = response;\n      \n        // If the required fields are available, proceed with the backend request\n        if (razorpay_payment_id) {\n          await axios.post('/api/payment-verification', {\n            razorpay_payment_id,\n            taskerId,\n            userId,\n            totalAmount,\n            partialAmount,\n            startDate,\n            endDate,\n            startTime,\n            endTime,\n            totalHours,\n          });\n        } else {\n          console.error('Missing Razorpay response details');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId, userId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"bg-gradient-to-r from-gray-800 via-gray-900 to-black min-h-screen flex items-center justify-center py-12 px-6\">\n      <div className=\"max-w-7xl w-full flex bg-white rounded-xl shadow-lg overflow-hidden\">\n       \n        <div className=\"w-full lg:w-1/2 px-6 py-8 bg-gray-50\">\n          <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">Billing Information</h2>\n          <form onSubmit={handlePayment}>\n            <div className=\"space-y-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <input\n                type=\"email\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <input\n                type=\"tel\"\n                placeholder=\"Contact\"\n                value={contact}\n                onChange={(e) => setContact(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">Start Date:</label>\n              <input\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">End Date:</label>\n              <input\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">Start Time:</label>\n              <input\n                type=\"time\"\n                value={startTime}\n                onChange={(e) => setStartTime(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">End Time:</label>\n              <input\n                type=\"time\"\n                value={endTime}\n                onChange={(e) => setEndTime(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <button\n                type=\"button\"\n                onClick={calculateTotalHours}\n                className=\"w-full py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition\"\n              >\n                Calculate Hours & Amount\n              </button>\n              <p className=\"mt-2 text-gray-800\">Total Hours: {totalHours}</p>\n              <p className=\"mt-2 text-gray-800\">Total Amount: ₹{totalAmount}</p>\n              <p className=\"mt-2 text-gray-800\">Partial Amount (50%): ₹{partialAmount}</p>\n            </div>\n          </form>\n        </div>\n\n        \n        <div className=\"w-full lg:w-1/2 bg-indigo-600 text-white flex items-center justify-center py-8\">\n          <button\n            onClick={handlePayment}\n            className=\"px-8 py-4 bg-indigo-700 rounded-lg text-xl font-semibold hover:bg-indigo-800 transition\"\n          >\n            Pay Now\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Payment;\n */\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n  const hourlyRate = parseFloat(sessionStorage.getItem('hourlyRate'));  // Fetch hourly rate from session storage\n  const userId = sessionStorage.getItem('userID');  // Fetch user ID from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState('08:00');\n  const [endTime, setEndTime] = useState('16:00');\n  const [totalHours, setTotalHours] = useState(0);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [partialAmount, setPartialAmount] = useState(0);\n  const [scriptLoaded, setScriptLoaded] = useState(false);  // State to track if Razorpay script is loaded\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      script.onload = () => {\n        setScriptLoaded(true);  // Set to true once Razorpay script is loaded\n        console.log(\"Razorpay script loaded\");\n      };\n      script.onerror = () => {\n        console.error(\"Failed to load Razorpay script\");\n      };\n      document.body.appendChild(script);\n    };\n\n    loadRazorpayScript(); // Load Razorpay script when component mounts\n  }, []);\n\n  const calculateTotalHours = () => {\n    const start = new Date(`${startDate}T${startTime}`);\n    const end = new Date(`${endDate}T${endTime}`);\n\n    if (start && end && end > start) {\n      const timeDiff = end - start;\n      const hours = timeDiff / (1000 * 60 * 60);\n      const workHoursPerDay = 10;  // 8 AM to 4 PM\n\n      // Calculate full workdays within the date range\n      const totalDays = Math.floor(hours / 24);\n      const fullWorkdayHours = totalDays * workHoursPerDay;\n\n      // Calculate hours for partial days (start/end times)\n      const remainingHours = hours % 24;\n      const partialDayHours = Math.min(remainingHours, workHoursPerDay);\n\n      const totalWorkHours = fullWorkdayHours + partialDayHours;\n      setTotalHours(Math.ceil(totalWorkHours));  // Round up any partial hours to the next full hour\n\n      const amount = Math.ceil(totalWorkHours) * hourlyRate;\n      setTotalAmount(amount);\n      setPartialAmount(amount / 2);\n    } else {\n      setTotalHours(0);\n      setTotalAmount(0);\n      setPartialAmount(0);\n    }\n  };\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n\n    // Check if Razorpay script is loaded before initiating payment\n    if (!scriptLoaded) {\n      alert('Razorpay SDK is still loading. Please wait...');\n      return;\n    }\n\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF', // Replace with your Razorpay key\n      amount: partialAmount * 100,  // Convert to paise\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        // Log the full response from Razorpay to verify it's correct\n        console.log('Razorpay response:', response);\n      \n        // You should have all the required information in the response object\n        const { razorpay_payment_id } = response;\n      \n        // If the required fields are available, proceed with the backend request\n        if (razorpay_payment_id) {\n          // Send the payment info and other booking details to the backend for storage\n          try {\n            const res = await axios.post('http://localhost:5000/api/payment-verification', {\n              razorpay_payment_id,\n              taskerId,\n              userId,\n              totalAmount,\n              partialAmount,\n              startDate,\n              endDate,\n              startTime,\n              endTime,\n              totalHours,\n            });\n\n            if (res.data.success) {\n              alert('Payment verified and booking details saved!');\n            } else {\n              alert('Error saving booking details');\n            }\n          } catch (error) {\n            console.error('Error verifying payment:', error);\n            alert('Payment verification failed');\n          }\n        } else {\n          console.error('Missing Razorpay response details');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId, userId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"bg-gradient-to-r from-gray-800 via-gray-900 to-black min-h-screen flex items-center justify-center py-12 px-6\">\n      <div className=\"max-w-7xl w-full flex bg-white rounded-xl shadow-lg overflow-hidden\">\n        {/* Left side for Billing Information */}\n        <div className=\"w-full lg:w-1/2 px-6 py-8 bg-gray-50\">\n          <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">Billing Information</h2>\n          <form onSubmit={handlePayment}>\n            <div className=\"space-y-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <input\n                type=\"email\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <input\n                type=\"tel\"\n                placeholder=\"Contact\"\n                value={contact}\n                onChange={(e) => setContact(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">Start Date:</label>\n              <input\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">End Date:</label>\n              <input\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">Start Time:</label>\n              <input\n                type=\"time\"\n                value={startTime}\n                onChange={(e) => setStartTime(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">End Time:</label>\n              <input\n                type=\"time\"\n                value={endTime}\n                onChange={(e) => setEndTime(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <button\n                type=\"button\"\n                onClick={calculateTotalHours}\n                className=\"w-full py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition\"\n              >\n                Calculate Hours & Amount\n              </button>\n              <p className=\"mt-2 text-gray-800\">Total Hours: {totalHours}</p>\n              <p className=\"mt-2 text-gray-800\">Total Amount: ₹{totalAmount}</p>\n              <p className=\"mt-2 text-gray-800\">Partial Amount (50%): ₹{partialAmount}</p>\n            </div>\n          </form>\n        </div>\n\n        {/* Right side for Payment Checkout */}\n        <div className=\"w-full lg:w-1/2 bg-indigo-600 text-white flex items-center justify-center py-8\">\n          <button\n            onClick={handlePayment}\n            className=\"px-8 py-4 bg-indigo-700 rounded-lg text-xl font-semibold hover:bg-indigo-800 transition\"\n          >\n            Pay Now\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Payment;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}