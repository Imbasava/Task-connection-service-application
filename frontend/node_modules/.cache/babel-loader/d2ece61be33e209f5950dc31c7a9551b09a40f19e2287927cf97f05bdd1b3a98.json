{"ast":null,"code":"/* import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n  const hourlyRate = sessionStorage.getItem('hourlyRate');  // Fetch hourly rate from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [hours, setHours] = useState(1);\n  const [amount, setAmount] = useState(hourlyRate * hours);  // Calculated based on hours and hourly rate\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const totalAmount = hourlyRate * hours * 100;  // Total amount in paise\n    const partialAmount = totalAmount / 2;\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF',\n      amount: partialAmount,  // Set to partial amount\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        try {\n          await axios.post('/api/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            taskerId,\n            totalAmount,\n            partialAmount,\n            hours,\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"payment-container\">\n      <div className=\"billing-info\">\n        <h2>Billing Information</h2>\n        <form onSubmit={handlePayment}>\n          \n          <button type=\"submit\">Pay Now</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Payment;\n */\n/* \nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n\n  // Retrieve user data from session storage\n  const hourlyRate = parseFloat(sessionStorage.getItem('hourlyRate')) || 0;\n  const userId = sessionStorage.getItem('userId');\n  const serviceId = sessionStorage.getItem('serviceId');\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [hours, setHours] = useState(1);\n  const [amount, setAmount] = useState(hourlyRate * hours * 100); // In paise\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const totalAmount = hourlyRate * hours * 100;  // Total amount in paise\n    const partialAmount = totalAmount / 2;\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF', // Replace with live key in production\n      amount: partialAmount,\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async (response) => {\n        try {\n          await axios.post('/api/booking/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            userId,\n            taskerId,\n            serviceId,\n            totalAmount,\n            partialAmount,\n            hours,\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"payment-container bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-600 min-h-screen flex justify-center items-center py-10\">\n      <div className=\"billing-info bg-white p-8 rounded-lg shadow-2xl w-full max-w-4xl grid grid-cols-1 md:grid-cols-2 gap-8 relative z-10\">\n        \n       \n        <div className=\"form-container space-y-6\">\n          <h2 className=\"text-2xl font-semibold text-gray-800 mb-6\">Billing Information</h2>\n          \n          <form onSubmit={handlePayment} className=\"space-y-6\">\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"Name\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Email\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"tel\"\n              value={contact}\n              onChange={(e) => setContact(e.target.value)}\n              placeholder=\"Contact\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"number\"\n              value={hours}\n              onChange={(e) => setHours(e.target.value)}\n              min=\"1\"\n              required\n              placeholder=\"Hours\"\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n          </form>\n        </div>\n\n        \n        <div className=\"checkout-summary bg-gray-100 p-6 rounded-lg shadow-md space-y-6\">\n          <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">Order Summary</h3>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Hourly Rate:</span>\n              <span className=\"font-medium text-gray-900\">₹{hourlyRate.toFixed(2)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Hours:</span>\n              <span className=\"font-medium text-gray-900\">{hours}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Total Amount:</span>\n              <span className=\"font-medium text-gray-900\">₹{(hourlyRate * hours).toFixed(2)}</span>\n            </div>\n          </div>\n          \n          <button\n            type=\"submit\"\n            onClick={handlePayment}\n            className=\"w-full py-3 px-6 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition duration-300\"\n          >\n            Pay Now\n          </button>\n        </div>\n      </div>\n\n      \n      <div className=\"absolute inset-0 bg-black opacity-30 z-0\"></div>\n    </div>\n  );\n};\n\nexport default Payment;\n */","map":{"version":3,"names":[],"sources":["/home/basava/Documents/TASKflow/frontend/src/pages/Payment/payment.js"],"sourcesContent":["/* import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n  const hourlyRate = sessionStorage.getItem('hourlyRate');  // Fetch hourly rate from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [hours, setHours] = useState(1);\n  const [amount, setAmount] = useState(hourlyRate * hours);  // Calculated based on hours and hourly rate\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const totalAmount = hourlyRate * hours * 100;  // Total amount in paise\n    const partialAmount = totalAmount / 2;\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF',\n      amount: partialAmount,  // Set to partial amount\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        try {\n          await axios.post('/api/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            taskerId,\n            totalAmount,\n            partialAmount,\n            hours,\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"payment-container\">\n      <div className=\"billing-info\">\n        <h2>Billing Information</h2>\n        <form onSubmit={handlePayment}>\n          \n          <button type=\"submit\">Pay Now</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Payment;\n */\n/* \nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n\n  // Retrieve user data from session storage\n  const hourlyRate = parseFloat(sessionStorage.getItem('hourlyRate')) || 0;\n  const userId = sessionStorage.getItem('userId');\n  const serviceId = sessionStorage.getItem('serviceId');\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [hours, setHours] = useState(1);\n  const [amount, setAmount] = useState(hourlyRate * hours * 100); // In paise\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const totalAmount = hourlyRate * hours * 100;  // Total amount in paise\n    const partialAmount = totalAmount / 2;\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF', // Replace with live key in production\n      amount: partialAmount,\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async (response) => {\n        try {\n          await axios.post('/api/booking/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            userId,\n            taskerId,\n            serviceId,\n            totalAmount,\n            partialAmount,\n            hours,\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"payment-container bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-600 min-h-screen flex justify-center items-center py-10\">\n      <div className=\"billing-info bg-white p-8 rounded-lg shadow-2xl w-full max-w-4xl grid grid-cols-1 md:grid-cols-2 gap-8 relative z-10\">\n        \n       \n        <div className=\"form-container space-y-6\">\n          <h2 className=\"text-2xl font-semibold text-gray-800 mb-6\">Billing Information</h2>\n          \n          <form onSubmit={handlePayment} className=\"space-y-6\">\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"Name\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Email\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"tel\"\n              value={contact}\n              onChange={(e) => setContact(e.target.value)}\n              placeholder=\"Contact\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"number\"\n              value={hours}\n              onChange={(e) => setHours(e.target.value)}\n              min=\"1\"\n              required\n              placeholder=\"Hours\"\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n          </form>\n        </div>\n\n        \n        <div className=\"checkout-summary bg-gray-100 p-6 rounded-lg shadow-md space-y-6\">\n          <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">Order Summary</h3>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Hourly Rate:</span>\n              <span className=\"font-medium text-gray-900\">₹{hourlyRate.toFixed(2)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Hours:</span>\n              <span className=\"font-medium text-gray-900\">{hours}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Total Amount:</span>\n              <span className=\"font-medium text-gray-900\">₹{(hourlyRate * hours).toFixed(2)}</span>\n            </div>\n          </div>\n          \n          <button\n            type=\"submit\"\n            onClick={handlePayment}\n            className=\"w-full py-3 px-6 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition duration-300\"\n          >\n            Pay Now\n          </button>\n        </div>\n      </div>\n\n      \n      <div className=\"absolute inset-0 bg-black opacity-30 z-0\"></div>\n    </div>\n  );\n};\n\nexport default Payment;\n */\n\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}