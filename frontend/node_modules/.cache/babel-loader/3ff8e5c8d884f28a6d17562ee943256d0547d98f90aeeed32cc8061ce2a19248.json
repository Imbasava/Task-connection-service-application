{"ast":null,"code":"var _jsxFileName = \"/home/basava/Documents/TASKflow/frontend/src/pages/Payment/payment.js\",\n  _s = $RefreshSig$();\n/* import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n  const hourlyRate = sessionStorage.getItem('hourlyRate');  // Fetch hourly rate from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [hours, setHours] = useState(1);\n  const [amount, setAmount] = useState(hourlyRate * hours);  // Calculated based on hours and hourly rate\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const totalAmount = hourlyRate * hours * 100;  // Total amount in paise\n    const partialAmount = totalAmount / 2;\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF',\n      amount: partialAmount,  // Set to partial amount\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        try {\n          await axios.post('/api/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            taskerId,\n            totalAmount,\n            partialAmount,\n            hours,\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"payment-container\">\n      <div className=\"billing-info\">\n        <h2>Billing Information</h2>\n        <form onSubmit={handlePayment}>\n          \n          <button type=\"submit\">Pay Now</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Payment;\n */\n/* \nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n\n  // Retrieve user data from session storage\n  const hourlyRate = parseFloat(sessionStorage.getItem('hourlyRate')) || 0;\n  const userId = sessionStorage.getItem('userId');\n  const serviceId = sessionStorage.getItem('serviceId');\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [hours, setHours] = useState(1);\n  const [amount, setAmount] = useState(hourlyRate * hours * 100); // In paise\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const totalAmount = hourlyRate * hours * 100;  // Total amount in paise\n    const partialAmount = totalAmount / 2;\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF', // Replace with live key in production\n      amount: partialAmount,\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async (response) => {\n        try {\n          await axios.post('/api/booking/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            userId,\n            taskerId,\n            serviceId,\n            totalAmount,\n            partialAmount,\n            hours,\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"payment-container bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-600 min-h-screen flex justify-center items-center py-10\">\n      <div className=\"billing-info bg-white p-8 rounded-lg shadow-2xl w-full max-w-4xl grid grid-cols-1 md:grid-cols-2 gap-8 relative z-10\">\n        \n       \n        <div className=\"form-container space-y-6\">\n          <h2 className=\"text-2xl font-semibold text-gray-800 mb-6\">Billing Information</h2>\n          \n          <form onSubmit={handlePayment} className=\"space-y-6\">\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"Name\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Email\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"tel\"\n              value={contact}\n              onChange={(e) => setContact(e.target.value)}\n              placeholder=\"Contact\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"number\"\n              value={hours}\n              onChange={(e) => setHours(e.target.value)}\n              min=\"1\"\n              required\n              placeholder=\"Hours\"\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n          </form>\n        </div>\n\n        \n        <div className=\"checkout-summary bg-gray-100 p-6 rounded-lg shadow-md space-y-6\">\n          <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">Order Summary</h3>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Hourly Rate:</span>\n              <span className=\"font-medium text-gray-900\">₹{hourlyRate.toFixed(2)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Hours:</span>\n              <span className=\"font-medium text-gray-900\">{hours}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Total Amount:</span>\n              <span className=\"font-medium text-gray-900\">₹{(hourlyRate * hours).toFixed(2)}</span>\n            </div>\n          </div>\n          \n          <button\n            type=\"submit\"\n            onClick={handlePayment}\n            className=\"w-full py-3 px-6 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition duration-300\"\n          >\n            Pay Now\n          </button>\n        </div>\n      </div>\n\n      \n      <div className=\"absolute inset-0 bg-black opacity-30 z-0\"></div>\n    </div>\n  );\n};\n\nexport default Payment;\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Payment = () => {\n  _s();\n  const location = useLocation();\n  const {\n    taskerId\n  } = location.state || {};\n  const hourlyRate = sessionStorage.getItem('hourlyRate'); // Fetch hourly rate from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [startTime, setStartTime] = useState('');\n  const [endTime, setEndTime] = useState('');\n  const [hours, setHours] = useState(0);\n  const [amount, setAmount] = useState(0);\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n  const calculateHoursAndAmount = () => {\n    const start = new Date(`1970-01-01T${startTime}`);\n    const end = new Date(`1970-01-01T${endTime}`);\n    if (end <= start || !hourlyRate) {\n      setHours(0);\n      setAmount(0);\n      return;\n    }\n\n    // Calculate difference in milliseconds\n    const diffMs = end - start;\n    let diffHours = diffMs / (1000 * 60 * 60); // Convert to hours\n\n    // Round up if there are any extra minutes\n    if (diffHours % 1 !== 0) {\n      diffHours = Math.ceil(diffHours);\n    }\n\n    // Apply max limit of 10 hours\n    const calculatedHours = Math.min(diffHours, 10);\n    setHours(calculatedHours);\n    setAmount(calculatedHours * hourlyRate);\n  };\n  useEffect(() => {\n    if (startTime && endTime) {\n      calculateHoursAndAmount();\n    }\n  }, [startTime, endTime]);\n  const handlePayment = async e => {\n    e.preventDefault();\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n    const totalAmount = amount * 100; // Convert to paise\n    const partialAmount = totalAmount / 2;\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF',\n      amount: partialAmount,\n      // Set to partial amount\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        try {\n          await axios.post('/api/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            taskerId,\n            userId: sessionStorage.getItem('userId'),\n            // Fetch userId from session storage\n            totalAmount,\n            partialAmount,\n            startTime,\n            endTime,\n            hours\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: {\n        name,\n        email,\n        contact\n      },\n      notes: {\n        taskerId\n      },\n      theme: {\n        color: '#F37254'\n      }\n    };\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"payment-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"billing-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Billing Information\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handlePayment,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: name,\n            onChange: e => setName(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Email:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            value: email,\n            onChange: e => setEmail(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Contact:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: contact,\n            onChange: e => setContact(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Start Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            value: startTime,\n            onChange: e => setStartTime(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"End Time:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"time\",\n            value: endTime,\n            onChange: e => setEndTime(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Hours: \", hours]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Amount: \\u20B9\", amount / 100]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Pay Now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 344,\n    columnNumber: 5\n  }, this);\n};\n_s(Payment, \"/wtrqAw5iD4uMql3UB6SXrHpqmI=\", false, function () {\n  return [useLocation];\n});\n_c = Payment;\nexport default Payment;\nvar _c;\n$RefreshReg$(_c, \"Payment\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","axios","jsxDEV","_jsxDEV","Payment","_s","location","taskerId","state","hourlyRate","sessionStorage","getItem","name","setName","email","setEmail","contact","setContact","startTime","setStartTime","endTime","setEndTime","hours","setHours","amount","setAmount","loadRazorpayScript","script","document","createElement","src","async","body","appendChild","calculateHoursAndAmount","start","Date","end","diffMs","diffHours","Math","ceil","calculatedHours","min","handlePayment","e","preventDefault","window","Razorpay","alert","totalAmount","partialAmount","options","key","currency","description","handler","response","post","razorpay_payment_id","razorpay_order_id","razorpay_signature","userId","error","prefill","notes","theme","color","razorpay","open","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/home/basava/Documents/TASKflow/frontend/src/pages/Payment/payment.js"],"sourcesContent":["/* import React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n  const hourlyRate = sessionStorage.getItem('hourlyRate');  // Fetch hourly rate from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [hours, setHours] = useState(1);\n  const [amount, setAmount] = useState(hourlyRate * hours);  // Calculated based on hours and hourly rate\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const totalAmount = hourlyRate * hours * 100;  // Total amount in paise\n    const partialAmount = totalAmount / 2;\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF',\n      amount: partialAmount,  // Set to partial amount\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        try {\n          await axios.post('/api/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            taskerId,\n            totalAmount,\n            partialAmount,\n            hours,\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"payment-container\">\n      <div className=\"billing-info\">\n        <h2>Billing Information</h2>\n        <form onSubmit={handlePayment}>\n          \n          <button type=\"submit\">Pay Now</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Payment;\n */\n/* \nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n\n  // Retrieve user data from session storage\n  const hourlyRate = parseFloat(sessionStorage.getItem('hourlyRate')) || 0;\n  const userId = sessionStorage.getItem('userId');\n  const serviceId = sessionStorage.getItem('serviceId');\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [hours, setHours] = useState(1);\n  const [amount, setAmount] = useState(hourlyRate * hours * 100); // In paise\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const totalAmount = hourlyRate * hours * 100;  // Total amount in paise\n    const partialAmount = totalAmount / 2;\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF', // Replace with live key in production\n      amount: partialAmount,\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async (response) => {\n        try {\n          await axios.post('/api/booking/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            userId,\n            taskerId,\n            serviceId,\n            totalAmount,\n            partialAmount,\n            hours,\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"payment-container bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-600 min-h-screen flex justify-center items-center py-10\">\n      <div className=\"billing-info bg-white p-8 rounded-lg shadow-2xl w-full max-w-4xl grid grid-cols-1 md:grid-cols-2 gap-8 relative z-10\">\n        \n       \n        <div className=\"form-container space-y-6\">\n          <h2 className=\"text-2xl font-semibold text-gray-800 mb-6\">Billing Information</h2>\n          \n          <form onSubmit={handlePayment} className=\"space-y-6\">\n            <input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              placeholder=\"Name\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Email\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"tel\"\n              value={contact}\n              onChange={(e) => setContact(e.target.value)}\n              placeholder=\"Contact\"\n              required\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n            <input\n              type=\"number\"\n              value={hours}\n              onChange={(e) => setHours(e.target.value)}\n              min=\"1\"\n              required\n              placeholder=\"Hours\"\n              className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n            />\n          </form>\n        </div>\n\n        \n        <div className=\"checkout-summary bg-gray-100 p-6 rounded-lg shadow-md space-y-6\">\n          <h3 className=\"text-xl font-semibold text-gray-800 mb-4\">Order Summary</h3>\n          \n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Hourly Rate:</span>\n              <span className=\"font-medium text-gray-900\">₹{hourlyRate.toFixed(2)}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Hours:</span>\n              <span className=\"font-medium text-gray-900\">{hours}</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"font-medium text-gray-700\">Total Amount:</span>\n              <span className=\"font-medium text-gray-900\">₹{(hourlyRate * hours).toFixed(2)}</span>\n            </div>\n          </div>\n          \n          <button\n            type=\"submit\"\n            onClick={handlePayment}\n            className=\"w-full py-3 px-6 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition duration-300\"\n          >\n            Pay Now\n          </button>\n        </div>\n      </div>\n\n      \n      <div className=\"absolute inset-0 bg-black opacity-30 z-0\"></div>\n    </div>\n  );\n};\n\nexport default Payment;\n */\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Payment = () => {\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n  const hourlyRate = sessionStorage.getItem('hourlyRate');  // Fetch hourly rate from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [startTime, setStartTime] = useState('');\n  const [endTime, setEndTime] = useState('');\n  const [hours, setHours] = useState(0);\n  const [amount, setAmount] = useState(0);\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      document.body.appendChild(script);\n    };\n    loadRazorpayScript();\n  }, []);\n\n  const calculateHoursAndAmount = () => {\n    const start = new Date(`1970-01-01T${startTime}`);\n    const end = new Date(`1970-01-01T${endTime}`);\n    \n    if (end <= start || !hourlyRate) {\n      setHours(0);\n      setAmount(0);\n      return;\n    }\n\n    // Calculate difference in milliseconds\n    const diffMs = end - start;\n    let diffHours = diffMs / (1000 * 60 * 60);  // Convert to hours\n\n    // Round up if there are any extra minutes\n    if (diffHours % 1 !== 0) {\n      diffHours = Math.ceil(diffHours);\n    }\n\n    // Apply max limit of 10 hours\n    const calculatedHours = Math.min(diffHours, 10);\n    setHours(calculatedHours);\n    setAmount(calculatedHours * hourlyRate);\n  };\n\n  useEffect(() => {\n    if (startTime && endTime) {\n      calculateHoursAndAmount();\n    }\n  }, [startTime, endTime]);\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const totalAmount = amount * 100;  // Convert to paise\n    const partialAmount = totalAmount / 2;\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF',\n      amount: partialAmount,  // Set to partial amount\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        try {\n          await axios.post('/api/payment-verification', {\n            razorpay_payment_id: response.razorpay_payment_id,\n            razorpay_order_id: response.razorpay_order_id,\n            razorpay_signature: response.razorpay_signature,\n            taskerId,\n            userId: sessionStorage.getItem('userId'), // Fetch userId from session storage\n            totalAmount,\n            partialAmount,\n            startTime,\n            endTime,\n            hours,\n          });\n          alert('Payment successful!');\n        } catch (error) {\n          alert('Payment verification failed.');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"payment-container\">\n      <div className=\"billing-info\">\n        <h2>Billing Information</h2>\n        <form onSubmit={handlePayment}>\n          <label>\n            Name:\n            <input type=\"text\" value={name} onChange={(e) => setName(e.target.value)} required />\n          </label>\n          <label>\n            Email:\n            <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} required />\n          </label>\n          <label>\n            Contact:\n            <input type=\"text\" value={contact} onChange={(e) => setContact(e.target.value)} required />\n          </label>\n          <label>\n            Start Time:\n            <input type=\"time\" value={startTime} onChange={(e) => setStartTime(e.target.value)} required />\n          </label>\n          <label>\n            End Time:\n            <input type=\"time\" value={endTime} onChange={(e) => setEndTime(e.target.value)} required />\n          </label>\n          <p>Total Hours: {hours}</p>\n          <p>Total Amount: ₹{amount / 100}</p>\n          <button type=\"submit\">Pay Now</button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Payment;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}