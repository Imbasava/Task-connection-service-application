{"ast":null,"code":"var _jsxFileName = \"/home/basava/Documents/TASKflow/frontend/src/pages/Insurance.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Insurance() {\n  _s();\n  const [isEnrolled, setIsEnrolled] = useState({});\n  const [insuranceOptions] = useState([{\n    type: 'Liability Coverage',\n    amount: 5000\n  }, {\n    type: 'Injury Protection',\n    amount: 10000\n  }, {\n    type: 'Property Damage',\n    amount: 7500\n  }]);\n  const [selectedInsurance, setSelectedInsurance] = useState(null);\n  const [showClaimForm, setShowClaimForm] = useState(false);\n  const [claimDetails, setClaimDetails] = useState({\n    description: '',\n    amount: ''\n  });\n  const [taskerDetails, setTaskerDetails] = useState({});\n  const taskerID = 1; // Replace this with actual tasker ID logic\n\n  useEffect(() => {\n    // Fetch tasker details and check eligibility for insurance\n    const fetchTaskerDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/taskers/${taskerID}`);\n        setTaskerDetails(response.data);\n\n        // Check eligibility (for service type and number of tasks completed)\n        if (response.data.completedTasks >= 2 && ['Fitness Training', 'Electrical Work'].includes(response.data.serviceType)) {\n          setIsEnrolled(prev => ({\n            ...prev,\n            eligible: true\n          }));\n        }\n      } catch (error) {\n        console.error('Error fetching tasker details:', error);\n      }\n    };\n    fetchTaskerDetails();\n  }, [taskerID]);\n\n  // Handle enrollment for a selected insurance type\n  const handleEnrollment = async insurance => {\n    if (!isEnrolled.eligible) {\n      alert('You are not eligible for insurance based on your service type or tasks completed.');\n      return;\n    }\n    try {\n      const {\n        type,\n        amount\n      } = insurance;\n      const response = await axios.post('http://localhost:5000/api/Insurance', {\n        taskerID,\n        insuranceType: type,\n        coverageAmount: amount\n      });\n      if (response.status === 200) {\n        setIsEnrolled(prev => ({\n          ...prev,\n          [insurance.type]: true\n        }));\n        alert(response.data.message); // Show success message with insurance type\n      }\n    } catch (error) {\n      console.error('Error enrolling in insurance:', error);\n      alert('Error enrolling in insurance. Please try again.');\n    }\n  };\n\n  // Show claim form when \"File a Claim\" is clicked\n  const handleShowClaimForm = insuranceType => {\n    setSelectedInsurance(insuranceType);\n    setShowClaimForm(true);\n  };\n\n  // Handle input change for claim details\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setClaimDetails({\n      ...claimDetails,\n      [name]: value\n    });\n  };\n\n  // Submit claim (this should link to backend in production)\n  const handleSubmitClaim = async () => {\n    try {\n      const response = await axios.post('/api/SubmitClaim', {\n        taskerID,\n        insuranceType: selectedInsurance,\n        description: claimDetails.description,\n        amount: claimDetails.amount\n      });\n      if (response.status === 200) {\n        alert(`Claim for ${selectedInsurance} submitted successfully!`);\n        // Reset form state\n        setShowClaimForm(false);\n        setClaimDetails({\n          description: '',\n          amount: ''\n        });\n      }\n    } catch (error) {\n      console.error('Error submitting claim:', error);\n      alert('Error submitting claim. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"insurance-container p-6 max-w-2xl mx-auto bg-white shadow-lg rounded-lg\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"Tasker Insurance Program\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), !isEnrolled.eligible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4 text-red-500\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are not eligible for insurance based on your service type or tasks completed.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), insuranceOptions.map((insurance, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6 p-4 bg-gray-100 rounded shadow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-semibold\",\n        children: insurance.type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Coverage Amount: $\", insurance.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), isEnrolled[insurance.type] ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleShowClaimForm(insurance.type),\n        className: \"px-4 py-2 mt-4 bg-green-600 text-white rounded hover:bg-green-700\",\n        children: \"File a Claim\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleEnrollment(insurance),\n        className: \"px-4 py-2 mt-4 bg-blue-600 text-white rounded hover:bg-blue-700\",\n        children: [\"Enroll in \", insurance.type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)), showClaimForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-claim-section mt-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"text-lg font-semibold\",\n        children: [\"File a Claim for \", selectedInsurance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-gray-700\",\n            children: \"Description of Issue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"description\",\n            value: claimDetails.description,\n            onChange: handleInputChange,\n            className: \"w-full px-3 py-2 border border-gray-300 rounded\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-gray-700\",\n            children: \"Claim Amount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"amount\",\n            value: claimDetails.amount,\n            onChange: handleInputChange,\n            className: \"w-full px-3 py-2 border border-gray-300 rounded\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: handleSubmitClaim,\n          className: \"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\",\n          children: \"Submit Claim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(Insurance, \"My5WX38Fw8vCTJx5QsKEtGs8HWw=\");\n_c = Insurance;\nexport default Insurance;\nvar _c;\n$RefreshReg$(_c, \"Insurance\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Insurance","_s","isEnrolled","setIsEnrolled","insuranceOptions","type","amount","selectedInsurance","setSelectedInsurance","showClaimForm","setShowClaimForm","claimDetails","setClaimDetails","description","taskerDetails","setTaskerDetails","taskerID","fetchTaskerDetails","response","get","data","completedTasks","includes","serviceType","prev","eligible","error","console","handleEnrollment","insurance","alert","post","insuranceType","coverageAmount","status","message","handleShowClaimForm","handleInputChange","e","name","value","target","handleSubmitClaim","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","onClick","onChange","_c","$RefreshReg$"],"sources":["/home/basava/Documents/TASKflow/frontend/src/pages/Insurance.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction Insurance() {\n  const [isEnrolled, setIsEnrolled] = useState({});\n  const [insuranceOptions] = useState([\n    { type: 'Liability Coverage', amount: 5000 },\n    { type: 'Injury Protection', amount: 10000 },\n    { type: 'Property Damage', amount: 7500 },\n  ]);\n  const [selectedInsurance, setSelectedInsurance] = useState(null);\n  const [showClaimForm, setShowClaimForm] = useState(false);\n  const [claimDetails, setClaimDetails] = useState({ description: '', amount: '' });\n  const [taskerDetails, setTaskerDetails] = useState({});\n  \n  const taskerID = 1; // Replace this with actual tasker ID logic\n  \n  useEffect(() => {\n    // Fetch tasker details and check eligibility for insurance\n    const fetchTaskerDetails = async () => {\n      try {\n        const response = await axios.get(`http://localhost:5000/api/taskers/${taskerID}`);\n        setTaskerDetails(response.data);\n\n        // Check eligibility (for service type and number of tasks completed)\n        if (response.data.completedTasks >= 2 && ['Fitness Training', 'Electrical Work'].includes(response.data.serviceType)) {\n          setIsEnrolled((prev) => ({ ...prev, eligible: true }));\n        }\n      } catch (error) {\n        console.error('Error fetching tasker details:', error);\n      }\n    };\n\n    fetchTaskerDetails();\n  }, [taskerID]);\n\n  // Handle enrollment for a selected insurance type\n  const handleEnrollment = async (insurance) => {\n    if (!isEnrolled.eligible) {\n      alert('You are not eligible for insurance based on your service type or tasks completed.');\n      return;\n    }\n\n    try {\n      const { type, amount } = insurance;\n      \n      const response = await axios.post('http://localhost:5000/api/Insurance', {\n        taskerID,\n        insuranceType: type,\n        coverageAmount: amount,\n      });\n\n      if (response.status === 200) {\n        setIsEnrolled((prev) => ({ ...prev, [insurance.type]: true }));\n        alert(response.data.message); // Show success message with insurance type\n      }\n    } catch (error) {\n      console.error('Error enrolling in insurance:', error);\n      alert('Error enrolling in insurance. Please try again.');\n    }\n  };\n\n  // Show claim form when \"File a Claim\" is clicked\n  const handleShowClaimForm = (insuranceType) => {\n    setSelectedInsurance(insuranceType);\n    setShowClaimForm(true);\n  };\n\n  // Handle input change for claim details\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setClaimDetails({ ...claimDetails, [name]: value });\n  };\n\n  // Submit claim (this should link to backend in production)\n  const handleSubmitClaim = async () => {\n    try {\n      const response = await axios.post('/api/SubmitClaim', {\n        taskerID,\n        insuranceType: selectedInsurance,\n        description: claimDetails.description,\n        amount: claimDetails.amount,\n      });\n\n      if (response.status === 200) {\n        alert(`Claim for ${selectedInsurance} submitted successfully!`);\n        // Reset form state\n        setShowClaimForm(false);\n        setClaimDetails({ description: '', amount: '' });\n      }\n    } catch (error) {\n      console.error('Error submitting claim:', error);\n      alert('Error submitting claim. Please try again.');\n    }\n  };\n\n  return (\n    <div className=\"insurance-container p-6 max-w-2xl mx-auto bg-white shadow-lg rounded-lg\">\n      <h2 className=\"text-2xl font-bold mb-4\">Tasker Insurance Program</h2>\n\n      {!isEnrolled.eligible && (\n        <div className=\"mb-4 text-red-500\">\n          <p>You are not eligible for insurance based on your service type or tasks completed.</p>\n        </div>\n      )}\n\n      {insuranceOptions.map((insurance, index) => (\n        <div key={index} className=\"mb-6 p-4 bg-gray-100 rounded shadow\">\n          <h3 className=\"text-xl font-semibold\">{insurance.type}</h3>\n          <p>Coverage Amount: ${insurance.amount}</p>\n\n          {isEnrolled[insurance.type] ? (\n            <button\n              onClick={() => handleShowClaimForm(insurance.type)}\n              className=\"px-4 py-2 mt-4 bg-green-600 text-white rounded hover:bg-green-700\"\n            >\n              File a Claim\n            </button>\n          ) : (\n            <button\n              onClick={() => handleEnrollment(insurance)}\n              className=\"px-4 py-2 mt-4 bg-blue-600 text-white rounded hover:bg-blue-700\"\n            >\n              Enroll in {insurance.type}\n            </button>\n          )}\n        </div>\n      ))}\n\n      {showClaimForm && (\n        <div className=\"file-claim-section mt-6\">\n          <h4 className=\"text-lg font-semibold\">File a Claim for {selectedInsurance}</h4>\n          <form className=\"mt-4\">\n            <div className=\"mb-4\">\n              <label className=\"block text-gray-700\">Description of Issue</label>\n              <input\n                type=\"text\"\n                name=\"description\"\n                value={claimDetails.description}\n                onChange={handleInputChange}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded\"\n              />\n            </div>\n\n            <div className=\"mb-4\">\n              <label className=\"block text-gray-700\">Claim Amount</label>\n              <input\n                type=\"text\"\n                name=\"amount\"\n                value={claimDetails.amount}\n                onChange={handleInputChange}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded\"\n              />\n            </div>\n\n            <button\n              type=\"button\"\n              onClick={handleSubmitClaim}\n              className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\"\n            >\n              Submit Claim\n            </button>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Insurance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}