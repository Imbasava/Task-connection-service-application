{"ast":null,"code":"var _jsxFileName = \"/home/basava/Documents/TASKflow/frontend/src/pages/Home.js\",\n  _s = $RefreshSig$();\n/* import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport BackgroundImage from './images/Backgroundimage.png'; // Adjusted path to import the image\n\n\nconst FirstHomePage = () => {\n    const navigate = useNavigate();\n\n    return (\n        <div className=\"min-h-screen flex flex-col\">\n           \n            <div className=\"relative h-screen bg-cover bg-center\" style={{ backgroundImage: `url(${BackgroundImage})` }}>\n                <div className=\"absolute inset-0 bg-black opacity-50\"></div>\n\n                <div className=\"relative z-10 flex flex-col items-center justify-center h-full text-center text-white\">\n                    <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">Choose Your Option to Get Started</h1>\n                    <p className=\"text-lg md:text-2xl mb-8\">Explore trusted professionals and get started today!</p>\n                    <div className=\"space-x-4\">\n                      \n                        <button \n                            className=\"bg-blue-500 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:bg-blue-600 transition duration-300\"\n                            onClick={() => {\n                                const role = sessionStorage.getItem('role');\n                        \n                                if (role === 'customer') {\n                                    alert('Access Denied: Customers are not allowed to provide services.');\n                                    // Optionally, redirect to a different page\n                                    navigate('/');\n                                } else {\n                                    // Allow tasker (or null role) to navigate\n                                    navigate('/Customerhome');\n                                }\n                            }}\n                        >\n                            Provide Service\n                            </button>\n                     \n                        <button \n                            className=\"bg-green-500 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:bg-green-600 transition duration-300\"\n                            onClick={() => navigate('/Taskerhome')} // Navigate to TaskerHome\n                        >\n                            Find Service\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default FirstHomePage; */\n/* \nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport BackgroundImage from './images/Backgroundimage.png'; // Adjust path to import the image\n\nconst FirstHomePage = () => {\n    const navigate = useNavigate();\n    const [role, setRole] = useState(null); // State to store the user role\n    const [loading, setLoading] = useState(true); // State to handle loading\n    const userId = sessionStorage.getItem('userID'); // Get userId from sessionStorage\n\n    useEffect(() => {\n        // Check if userId is available in session storage\n        if (userId) {\n            // If userId is present, fetch user role from the backend\n            fetch(`http://localhost:5000/api/get-user-role?userId=${userId}`)\n                .then((response) => {\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! Status: ${response.status}`);\n                    }\n                    return response.json();\n                })\n                .then((data) => {\n                    if (data.success) {\n                        setRole(data.role); // Set the role from the response\n                        if (data.taskerId) {\n                            sessionStorage.setItem('taskerId', data.taskerId);\n                        }\n                    } else {\n                        console.error('Error fetching user role:', data.message);\n                    }\n                    setLoading(false);\n                })\n                .catch((error) => {\n                    console.error('Error:', error);\n                    setLoading(false);\n                });\n        } else {\n            // If userId is not in session storage, set loading to false\n            setLoading(false);\n        }\n    }, [userId]);\n    \n\n    // If still loading or userId is not found, show loading or error message\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className=\"min-h-screen flex flex-col\">\n            \n            <div className=\"relative h-screen bg-cover bg-center\" style={{ backgroundImage: `url(${BackgroundImage})` }}>\n                <div className=\"absolute inset-0 bg-black opacity-50\"></div> \n\n               \n                <div className=\"relative z-10 flex flex-col items-center justify-center h-full text-center text-white\">\n                    <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">Choose Your Option to Get Started</h1>\n                    <p className=\"text-lg md:text-2xl mb-8\">Explore trusted professionals and get started today!</p>\n                    <div className=\"space-x-4\">\n                     \n                        <button\n                            className=\"bg-blue-500 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:bg-blue-600 transition duration-300\"\n                            onClick={() => {\n                                // Only allow navigation if role is not 'tasker'\n                                    navigate('/Customerhome');\n                            }}\n                        >\n                            Provide Service\n                        </button>\n                        \n                        <button\n                            className=\"bg-green-500 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:bg-green-600 transition duration-300\"\n                            onClick={() => {\n                                if (role === 'tasker') {\n                                    alert('Access Denied: Taskers cannot provide services.');\n                                }else {\n                                    navigate('/Taskerhome');\n                                }\n                            }}\n                        >\n                            Find Service\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default FirstHomePage;\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport BackgroundImage from './images/Backgroundimage.png'; // Adjust path to import the image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FirstHomePage = () => {\n  _s();\n  const navigate = useNavigate();\n  const [role, setRole] = useState(null); // State to store the user role\n  const [taskerId, setTaskerId] = useState(null); // State to store the taskerId\n  const [loading, setLoading] = useState(true); // State to handle loading\n  const userId = sessionStorage.getItem('userID'); // Get userId from sessionStorage\n\n  useEffect(() => {\n    // Check if userId is available in session storage\n    if (userId) {\n      console.log(\"userID is:\", userId);\n      // If userId is present, fetch user role and taskerId from the backend\n      fetch(`http://localhost:5000/api/get-user-role?userId=${userId}`).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        if (data.success) {\n          setRole(data.role); // Set the role from the response\n          console.log('role:', data.role);\n          sessionStorage.setItem('role', data.role);\n          setTaskerId(data.taskerId); // Set taskerId from the response\n          if (data.taskerId) {\n            sessionStorage.setItem('taskerId', data.taskerId); // Store taskerId in session storage\n          }\n        } else {\n          console.error('Error fetching user role:', data.message);\n        }\n        setLoading(false);\n      }).catch(error => {\n        console.error('Error:', error);\n        setLoading(false);\n      });\n    } else {\n      // If userId is not in session storage, set loading to false\n      setLoading(false);\n    }\n  }, [userId]);\n\n  // If still loading or userId is not found, show loading or error message\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative h-screen bg-cover bg-center\",\n      style: {\n        backgroundImage: `url(${BackgroundImage})`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 bg-black opacity-50\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative z-10 flex flex-col items-center justify-center h-full text-center text-white\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-4xl md:text-6xl font-bold mb-4\",\n          children: \"Choose Your Option to Get Started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg md:text-2xl mb-8\",\n          children: \"Explore trusted professionals and get started today!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-x-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-blue-500 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:bg-blue-600 transition duration-300\",\n            onClick: () => {\n              // Only allow navigation if role is not 'tasker'\n              if (role === 'customer') {\n                alert('Access Denied: Taskers cannot provide services.');\n              } else {\n                navigate('/Customerhome');\n              }\n            },\n            children: \"Provide Service\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bg-green-500 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:bg-green-600 transition duration-300\",\n            onClick: () => {\n              if (role === 'tasker') {\n                alert('Access Denied: Taskers cannot provide services.');\n              } else {\n                navigate('/Taskerhome');\n              }\n            },\n            children: \"Find Service\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 200,\n    columnNumber: 9\n  }, this);\n};\n_s(FirstHomePage, \"Jzu/5ZPVR1quMbNe1FI12AZ5CBw=\", false, function () {\n  return [useNavigate];\n});\n_c = FirstHomePage;\nexport default FirstHomePage;\nvar _c;\n$RefreshReg$(_c, \"FirstHomePage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","BackgroundImage","jsxDEV","_jsxDEV","FirstHomePage","_s","navigate","role","setRole","taskerId","setTaskerId","loading","setLoading","userId","sessionStorage","getItem","console","log","fetch","then","response","ok","Error","status","json","data","success","setItem","error","message","catch","children","fileName","_jsxFileName","lineNumber","columnNumber","className","style","backgroundImage","onClick","alert","_c","$RefreshReg$"],"sources":["/home/basava/Documents/TASKflow/frontend/src/pages/Home.js"],"sourcesContent":["/* import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport BackgroundImage from './images/Backgroundimage.png'; // Adjusted path to import the image\n\n\nconst FirstHomePage = () => {\n    const navigate = useNavigate();\n\n    return (\n        <div className=\"min-h-screen flex flex-col\">\n           \n            <div className=\"relative h-screen bg-cover bg-center\" style={{ backgroundImage: `url(${BackgroundImage})` }}>\n                <div className=\"absolute inset-0 bg-black opacity-50\"></div>\n\n                <div className=\"relative z-10 flex flex-col items-center justify-center h-full text-center text-white\">\n                    <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">Choose Your Option to Get Started</h1>\n                    <p className=\"text-lg md:text-2xl mb-8\">Explore trusted professionals and get started today!</p>\n                    <div className=\"space-x-4\">\n                      \n                        <button \n                            className=\"bg-blue-500 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:bg-blue-600 transition duration-300\"\n                            onClick={() => {\n                                const role = sessionStorage.getItem('role');\n                        \n                                if (role === 'customer') {\n                                    alert('Access Denied: Customers are not allowed to provide services.');\n                                    // Optionally, redirect to a different page\n                                    navigate('/');\n                                } else {\n                                    // Allow tasker (or null role) to navigate\n                                    navigate('/Customerhome');\n                                }\n                            }}\n                        >\n                            Provide Service\n                            </button>\n                     \n                        <button \n                            className=\"bg-green-500 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:bg-green-600 transition duration-300\"\n                            onClick={() => navigate('/Taskerhome')} // Navigate to TaskerHome\n                        >\n                            Find Service\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default FirstHomePage; */\n/* \nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport BackgroundImage from './images/Backgroundimage.png'; // Adjust path to import the image\n\nconst FirstHomePage = () => {\n    const navigate = useNavigate();\n    const [role, setRole] = useState(null); // State to store the user role\n    const [loading, setLoading] = useState(true); // State to handle loading\n    const userId = sessionStorage.getItem('userID'); // Get userId from sessionStorage\n\n    useEffect(() => {\n        // Check if userId is available in session storage\n        if (userId) {\n            // If userId is present, fetch user role from the backend\n            fetch(`http://localhost:5000/api/get-user-role?userId=${userId}`)\n                .then((response) => {\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! Status: ${response.status}`);\n                    }\n                    return response.json();\n                })\n                .then((data) => {\n                    if (data.success) {\n                        setRole(data.role); // Set the role from the response\n                        if (data.taskerId) {\n                            sessionStorage.setItem('taskerId', data.taskerId);\n                        }\n                    } else {\n                        console.error('Error fetching user role:', data.message);\n                    }\n                    setLoading(false);\n                })\n                .catch((error) => {\n                    console.error('Error:', error);\n                    setLoading(false);\n                });\n        } else {\n            // If userId is not in session storage, set loading to false\n            setLoading(false);\n        }\n    }, [userId]);\n    \n\n    // If still loading or userId is not found, show loading or error message\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className=\"min-h-screen flex flex-col\">\n            \n            <div className=\"relative h-screen bg-cover bg-center\" style={{ backgroundImage: `url(${BackgroundImage})` }}>\n                <div className=\"absolute inset-0 bg-black opacity-50\"></div> \n\n               \n                <div className=\"relative z-10 flex flex-col items-center justify-center h-full text-center text-white\">\n                    <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">Choose Your Option to Get Started</h1>\n                    <p className=\"text-lg md:text-2xl mb-8\">Explore trusted professionals and get started today!</p>\n                    <div className=\"space-x-4\">\n                     \n                        <button\n                            className=\"bg-blue-500 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:bg-blue-600 transition duration-300\"\n                            onClick={() => {\n                                // Only allow navigation if role is not 'tasker'\n                                    navigate('/Customerhome');\n                            }}\n                        >\n                            Provide Service\n                        </button>\n                        \n                        <button\n                            className=\"bg-green-500 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:bg-green-600 transition duration-300\"\n                            onClick={() => {\n                                if (role === 'tasker') {\n                                    alert('Access Denied: Taskers cannot provide services.');\n                                }else {\n                                    navigate('/Taskerhome');\n                                }\n                            }}\n                        >\n                            Find Service\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default FirstHomePage;\n */\n\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport BackgroundImage from './images/Backgroundimage.png'; // Adjust path to import the image\n\nconst FirstHomePage = () => {\n    const navigate = useNavigate();\n    const [role, setRole] = useState(null); // State to store the user role\n    const [taskerId, setTaskerId] = useState(null); // State to store the taskerId\n    const [loading, setLoading] = useState(true); // State to handle loading\n    const userId = sessionStorage.getItem('userID'); // Get userId from sessionStorage\n\n    useEffect(() => {\n        // Check if userId is available in session storage\n        if (userId) { \n            console.log(\"userID is:\",userId)\n            // If userId is present, fetch user role and taskerId from the backend\n            fetch(`http://localhost:5000/api/get-user-role?userId=${userId}`)\n                .then((response) => {\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! Status: ${response.status}`);\n                    }\n                    return response.json();\n                })\n                .then((data) => {\n                    if (data.success) {\n                        setRole(data.role); // Set the role from the response\n                        console.log('role:',data.role);\n                        sessionStorage.setItem('role', data.role);\n                        setTaskerId(data.taskerId); // Set taskerId from the response\n                        if (data.taskerId) {\n                            sessionStorage.setItem('taskerId', data.taskerId); // Store taskerId in session storage\n                        }\n                    } else {\n                        console.error('Error fetching user role:', data.message);\n                    }\n                    setLoading(false);\n                })\n                .catch((error) => {\n                    console.error('Error:', error);\n                    setLoading(false);\n                });\n        } else {\n            // If userId is not in session storage, set loading to false\n            setLoading(false);\n        }\n    }, [userId]);\n    \n\n    // If still loading or userId is not found, show loading or error message\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div className=\"min-h-screen flex flex-col\">\n            {/* Hero Section with Background Image */}\n            <div className=\"relative h-screen bg-cover bg-center\" style={{ backgroundImage: `url(${BackgroundImage})` }}>\n                <div className=\"absolute inset-0 bg-black opacity-50\"></div> {/* Dark overlay */}\n\n                {/* Centered Content */}\n                <div className=\"relative z-10 flex flex-col items-center justify-center h-full text-center text-white\">\n                    <h1 className=\"text-4xl md:text-6xl font-bold mb-4\">Choose Your Option to Get Started</h1>\n                    <p className=\"text-lg md:text-2xl mb-8\">Explore trusted professionals and get started today!</p>\n                    <div className=\"space-x-4\">\n                        {/* Navigate to Customer Homepage */}\n                        <button\n                            className=\"bg-blue-500 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:bg-blue-600 transition duration-300\"\n                            onClick={() => {\n                                // Only allow navigation if role is not 'tasker'\n                                  if (role === 'customer') {\n                                    alert('Access Denied: Taskers cannot provide services.');\n                                }else {\n                                    navigate('/Customerhome');\n                                }  \n                            }}\n                        >\n                            Provide Service\n                        </button>\n                        \n                        <button\n                            className=\"bg-green-500 text-white font-semibold py-3 px-8 rounded-lg shadow-lg hover:bg-green-600 transition duration-300\"\n                            onClick={() => {\n                                if (role === 'tasker') {\n                                    alert('Access Denied: Taskers cannot provide services.');\n                                }else {\n                                    navigate('/Taskerhome');\n                                }\n                            }}\n                        >\n                            Find Service\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default FirstHomePage;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}