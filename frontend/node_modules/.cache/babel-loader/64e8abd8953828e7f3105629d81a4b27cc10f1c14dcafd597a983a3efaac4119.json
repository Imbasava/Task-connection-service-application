{"ast":null,"code":"/* import React, { useState, useEffect } from 'react';\nimport { useNavigate,useLocation } from 'react-router-dom';\nimport axios from 'axios';\nconst Payment = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n  const hourlyRate = parseFloat(sessionStorage.getItem('hourlyRate'));  // Fetch hourly rate from session storage\n  const userId = sessionStorage.getItem('userID');  // Fetch user ID from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState('08:00');\n  const [endTime, setEndTime] = useState('16:00');\n  const [totalHours, setTotalHours] = useState(0);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [partialAmount, setPartialAmount] = useState(0);\n  const [scriptLoaded, setScriptLoaded] = useState(false);  // State to track if Razorpay script is loaded\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      script.onload = () => {\n        setScriptLoaded(true);  // Set to true once Razorpay script is loaded\n        console.log(\"Razorpay script loaded\");\n      };\n      script.onerror = () => {\n        console.error(\"Failed to load Razorpay script\");\n      };\n      document.body.appendChild(script);\n    };\n\n    loadRazorpayScript(); // Load Razorpay script when component mounts\n  }, []);\n\n  const calculateTotalHours = () => {\n    const start = new Date(`${startDate}T${startTime}`);\n    const end = new Date(`${endDate}T${endTime}`);\n\n    if (start && end && end > start) {\n      const timeDiff = end - start;\n      const hours = timeDiff / (1000 * 60 * 60);\n      const workHoursPerDay = 10;  // 8 AM to 4 PM\n\n      // Calculate full workdays within the date range\n      const totalDays = Math.floor(hours / 24);\n      const fullWorkdayHours = totalDays * workHoursPerDay;\n\n      // Calculate hours for partial days (start/end times)\n      const remainingHours = hours % 24;\n      const partialDayHours = Math.min(remainingHours, workHoursPerDay);\n\n      const totalWorkHours = fullWorkdayHours + partialDayHours;\n      setTotalHours(Math.ceil(totalWorkHours));  // Round up any partial hours to the next full hour\n\n      const amount = Math.ceil(totalWorkHours) * hourlyRate;\n      setTotalAmount(amount);\n      setPartialAmount(amount / 2);\n    } else {\n      setTotalHours(0);\n      setTotalAmount(0);\n      setPartialAmount(0);\n    }\n  };\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n\n    // Check if Razorpay script is loaded before initiating payment\n    if (!scriptLoaded) {\n      alert('Razorpay SDK is still loading. Please wait...');\n      return;\n    }\n\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF', // Replace with your Razorpay key\n      amount: partialAmount * 100,  // Convert to paise\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        // Log the full response from Razorpay to verify it's correct\n        console.log('Razorpay response:', response);\n      \n        // You should have all the required information in the response object\n        const { razorpay_payment_id } = response;\n      \n        // If the required fields are available, proceed with the backend request\n        if (razorpay_payment_id) {\n          // Send the payment info and other booking details to the backend for storage\n          try {\n            const res = await axios.post('http://localhost:5000/api/payment-verification', {\n              razorpay_payment_id,\n              taskerId,\n              userId,\n              totalAmount,\n              partialAmount,\n              startDate,\n              endDate,\n              startTime,\n              endTime,\n              totalHours,\n              role:'customer'\n            });\n\n            if (res.data.success) {\n              alert('Payment verified and booking details saved!');\n              sessionStorage.setItem('role','customer');  // or 'customer'\n              navigate('/Taskerhome')\n\n            } else {\n              alert('Error saving booking details');\n            }\n          } catch (error) {\n            console.error('Error verifying payment:', error);\n            alert('Payment verification failed');\n          }\n        } else {\n          console.error('Missing Razorpay response details');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId, userId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"bg-gradient-to-r from-gray-800 via-gray-900 to-black min-h-screen flex items-center justify-center py-12 px-6\">\n      <div className=\"max-w-7xl w-full flex bg-white rounded-xl shadow-lg overflow-hidden\">\n        \n        <div className=\"w-full lg:w-1/2 px-6 py-8 bg-gray-50\">\n          <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">Billing Information</h2>\n          <form onSubmit={handlePayment}>\n            <div className=\"space-y-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <input\n                type=\"email\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <input\n                type=\"tel\"\n                placeholder=\"Contact\"\n                value={contact}\n                onChange={(e) => setContact(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">Start Date:</label>\n              <input\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">End Date:</label>\n              <input\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">Start Time:</label>\n              <input\n                type=\"time\"\n                value={startTime}\n                onChange={(e) => setStartTime(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">End Time:</label>\n              <input\n                type=\"time\"\n                value={endTime}\n                onChange={(e) => setEndTime(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <button\n                type=\"button\"\n                onClick={calculateTotalHours}\n                className=\"w-full py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition\"\n              >\n                Calculate Hours & Amount\n              </button>\n              <p className=\"mt-2 text-gray-800\">Total Hours: {totalHours}</p>\n              <p className=\"mt-2 text-gray-800\">Total Amount: ₹{totalAmount}</p>\n              <p className=\"mt-2 text-gray-800\">Partial Amount (50%): ₹{partialAmount}</p>\n            </div>\n          </form>\n        </div>\n\n       \n        <div className=\"w-full lg:w-1/2 bg-indigo-600 text-white flex items-center justify-center py-8\">\n          <button\n            onClick={handlePayment}\n            className=\"px-8 py-4 bg-indigo-700 rounded-lg text-xl font-semibold hover:bg-indigo-800 transition\"\n          >\n            Pay Now\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Payment;\n */","map":{"version":3,"names":[],"sources":["/home/basava/Documents/TASKflow/frontend/src/pages/Payment/payment.js"],"sourcesContent":["/* import React, { useState, useEffect } from 'react';\nimport { useNavigate,useLocation } from 'react-router-dom';\nimport axios from 'axios';\nconst Payment = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { taskerId } = location.state || {};\n  const hourlyRate = parseFloat(sessionStorage.getItem('hourlyRate'));  // Fetch hourly rate from session storage\n  const userId = sessionStorage.getItem('userID');  // Fetch user ID from session storage\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [contact, setContact] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [startTime, setStartTime] = useState('08:00');\n  const [endTime, setEndTime] = useState('16:00');\n  const [totalHours, setTotalHours] = useState(0);\n  const [totalAmount, setTotalAmount] = useState(0);\n  const [partialAmount, setPartialAmount] = useState(0);\n  const [scriptLoaded, setScriptLoaded] = useState(false);  // State to track if Razorpay script is loaded\n\n  useEffect(() => {\n    const loadRazorpayScript = () => {\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/v1/checkout.js';\n      script.async = true;\n      script.onload = () => {\n        setScriptLoaded(true);  // Set to true once Razorpay script is loaded\n        console.log(\"Razorpay script loaded\");\n      };\n      script.onerror = () => {\n        console.error(\"Failed to load Razorpay script\");\n      };\n      document.body.appendChild(script);\n    };\n\n    loadRazorpayScript(); // Load Razorpay script when component mounts\n  }, []);\n\n  const calculateTotalHours = () => {\n    const start = new Date(`${startDate}T${startTime}`);\n    const end = new Date(`${endDate}T${endTime}`);\n\n    if (start && end && end > start) {\n      const timeDiff = end - start;\n      const hours = timeDiff / (1000 * 60 * 60);\n      const workHoursPerDay = 10;  // 8 AM to 4 PM\n\n      // Calculate full workdays within the date range\n      const totalDays = Math.floor(hours / 24);\n      const fullWorkdayHours = totalDays * workHoursPerDay;\n\n      // Calculate hours for partial days (start/end times)\n      const remainingHours = hours % 24;\n      const partialDayHours = Math.min(remainingHours, workHoursPerDay);\n\n      const totalWorkHours = fullWorkdayHours + partialDayHours;\n      setTotalHours(Math.ceil(totalWorkHours));  // Round up any partial hours to the next full hour\n\n      const amount = Math.ceil(totalWorkHours) * hourlyRate;\n      setTotalAmount(amount);\n      setPartialAmount(amount / 2);\n    } else {\n      setTotalHours(0);\n      setTotalAmount(0);\n      setPartialAmount(0);\n    }\n  };\n\n  const handlePayment = async (e) => {\n    e.preventDefault();\n\n    // Check if Razorpay script is loaded before initiating payment\n    if (!scriptLoaded) {\n      alert('Razorpay SDK is still loading. Please wait...');\n      return;\n    }\n\n    if (!window.Razorpay) {\n      alert('Razorpay SDK failed to load. Please check your connection.');\n      return;\n    }\n\n    const options = {\n      key: 'rzp_test_KA0MVYPAHSnecF', // Replace with your Razorpay key\n      amount: partialAmount * 100,  // Convert to paise\n      currency: 'INR',\n      name: 'Your Company Name',\n      description: 'Booking Tasker',\n      handler: async function (response) {\n        // Log the full response from Razorpay to verify it's correct\n        console.log('Razorpay response:', response);\n      \n        // You should have all the required information in the response object\n        const { razorpay_payment_id } = response;\n      \n        // If the required fields are available, proceed with the backend request\n        if (razorpay_payment_id) {\n          // Send the payment info and other booking details to the backend for storage\n          try {\n            const res = await axios.post('http://localhost:5000/api/payment-verification', {\n              razorpay_payment_id,\n              taskerId,\n              userId,\n              totalAmount,\n              partialAmount,\n              startDate,\n              endDate,\n              startTime,\n              endTime,\n              totalHours,\n              role:'customer'\n            });\n\n            if (res.data.success) {\n              alert('Payment verified and booking details saved!');\n              sessionStorage.setItem('role','customer');  // or 'customer'\n              navigate('/Taskerhome')\n\n            } else {\n              alert('Error saving booking details');\n            }\n          } catch (error) {\n            console.error('Error verifying payment:', error);\n            alert('Payment verification failed');\n          }\n        } else {\n          console.error('Missing Razorpay response details');\n        }\n      },\n      prefill: { name, email, contact },\n      notes: { taskerId, userId },\n      theme: { color: '#F37254' },\n    };\n\n    const razorpay = new window.Razorpay(options);\n    razorpay.open();\n  };\n\n  return (\n    <div className=\"bg-gradient-to-r from-gray-800 via-gray-900 to-black min-h-screen flex items-center justify-center py-12 px-6\">\n      <div className=\"max-w-7xl w-full flex bg-white rounded-xl shadow-lg overflow-hidden\">\n        \n        <div className=\"w-full lg:w-1/2 px-6 py-8 bg-gray-50\">\n          <h2 className=\"text-2xl font-semibold text-gray-800 mb-4\">Billing Information</h2>\n          <form onSubmit={handlePayment}>\n            <div className=\"space-y-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Name\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <input\n                type=\"email\"\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <input\n                type=\"tel\"\n                placeholder=\"Contact\"\n                value={contact}\n                onChange={(e) => setContact(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">Start Date:</label>\n              <input\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">End Date:</label>\n              <input\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">Start Time:</label>\n              <input\n                type=\"time\"\n                value={startTime}\n                onChange={(e) => setStartTime(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <label className=\"block text-gray-700\">End Time:</label>\n              <input\n                type=\"time\"\n                value={endTime}\n                onChange={(e) => setEndTime(e.target.value)}\n                className=\"w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500\"\n              />\n              <button\n                type=\"button\"\n                onClick={calculateTotalHours}\n                className=\"w-full py-2 bg-indigo-600 text-white font-semibold rounded-lg hover:bg-indigo-700 transition\"\n              >\n                Calculate Hours & Amount\n              </button>\n              <p className=\"mt-2 text-gray-800\">Total Hours: {totalHours}</p>\n              <p className=\"mt-2 text-gray-800\">Total Amount: ₹{totalAmount}</p>\n              <p className=\"mt-2 text-gray-800\">Partial Amount (50%): ₹{partialAmount}</p>\n            </div>\n          </form>\n        </div>\n\n       \n        <div className=\"w-full lg:w-1/2 bg-indigo-600 text-white flex items-center justify-center py-8\">\n          <button\n            onClick={handlePayment}\n            className=\"px-8 py-4 bg-indigo-700 rounded-lg text-xl font-semibold hover:bg-indigo-800 transition\"\n          >\n            Pay Now\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Payment;\n */"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}