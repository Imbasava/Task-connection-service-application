{"ast":null,"code":"// In routes/booking.js\napp.post('/api/update-payment', async (req, res) => {\n  const {\n    bookingId,\n    fullAmountPaid\n  } = req.body;\n  if (fullAmountPaid) {\n    try {\n      // Update the booking to mark it as fully paid\n      const result = await db.query('UPDATE booking SET paid_amount = total_amount WHERE booking_id = ?', [bookingId]);\n      if (result.affectedRows > 0) {\n        res.json({\n          success: true\n        });\n      } else {\n        res.json({\n          success: false,\n          message: 'Booking not found or already updated.'\n        });\n      }\n    } catch (error) {\n      console.error('Error updating booking:', error);\n      res.status(500).json({\n        success: false,\n        error: 'Database error'\n      });\n    }\n  } else {\n    res.status(400).json({\n      success: false,\n      message: 'Invalid payment request'\n    });\n  }\n});","map":{"version":3,"names":["app","post","req","res","bookingId","fullAmountPaid","body","result","db","query","affectedRows","json","success","message","error","console","status"],"sources":["/home/basava/Documents/TASKflow/frontend/src/pages/Payment/payment2.js"],"sourcesContent":["// In routes/booking.js\napp.post('/api/update-payment', async (req, res) => {\n    const { bookingId, fullAmountPaid } = req.body;\n    \n    if (fullAmountPaid) {\n      try {\n        // Update the booking to mark it as fully paid\n        const result = await db.query(\n          'UPDATE booking SET paid_amount = total_amount WHERE booking_id = ?',\n          [bookingId]\n        );\n        \n        if (result.affectedRows > 0) {\n          res.json({ success: true });\n        } else {\n          res.json({ success: false, message: 'Booking not found or already updated.' });\n        }\n      } catch (error) {\n        console.error('Error updating booking:', error);\n        res.status(500).json({ success: false, error: 'Database error' });\n      }\n    } else {\n      res.status(400).json({ success: false, message: 'Invalid payment request' });\n    }\n  });\n  \n  "],"mappings":"AAAA;AACAA,GAAG,CAACC,IAAI,CAAC,qBAAqB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAChD,MAAM;IAAEC,SAAS;IAAEC;EAAe,CAAC,GAAGH,GAAG,CAACI,IAAI;EAE9C,IAAID,cAAc,EAAE;IAClB,IAAI;MACF;MACA,MAAME,MAAM,GAAG,MAAMC,EAAE,CAACC,KAAK,CAC3B,oEAAoE,EACpE,CAACL,SAAS,CACZ,CAAC;MAED,IAAIG,MAAM,CAACG,YAAY,GAAG,CAAC,EAAE;QAC3BP,GAAG,CAACQ,IAAI,CAAC;UAAEC,OAAO,EAAE;QAAK,CAAC,CAAC;MAC7B,CAAC,MAAM;QACLT,GAAG,CAACQ,IAAI,CAAC;UAAEC,OAAO,EAAE,KAAK;UAAEC,OAAO,EAAE;QAAwC,CAAC,CAAC;MAChF;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CX,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;QAAEC,OAAO,EAAE,KAAK;QAAEE,KAAK,EAAE;MAAiB,CAAC,CAAC;IACnE;EACF,CAAC,MAAM;IACLX,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;MAAEC,OAAO,EAAE,KAAK;MAAEC,OAAO,EAAE;IAA0B,CAAC,CAAC;EAC9E;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}